{
  "name": "Freezer",
  "tagline": "Freezer is a .NET webpage screenshotting library. It's fully integrable into an ASP.NET MVC application and supports HTML5 / CSS3 specifications.",
  "body": "### Sample usage\r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://github.com\")\r\n                  .SetBrowserSize(1366, 768)\r\n                  .SetCaptureZone(CaptureZone.FullPage) // Set what should be captured\r\n                  .SetTrigger(new WindowLoadTrigger()); // Set when the picture is taken\r\n                \r\n    System.IO.File.WriteAllBytes(\"this_is_not_even_my_final_screenshot.png\", screenshotJob.Freeze()); \r\n\r\n### Screenshot at the right moment \r\n\r\nFreezer can bind the capture instant to common web browser event (`DOMContentLoaded`, `window.onload`). \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://github.com\")\r\n                   // Capture the screenshot 50 ms after DOMContentLoaded is fired\r\n                  .SetTrigger(new DomReadyTrigger(50)); \r\n\r\nHowever,  at any time of your page's life, you can dispatch \"FreezerFire\" event to trigger the capture. \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n                  .SetTrigger(new FreezerJsEventTrigger()); \r\n\r\nThen in your page : \r\n\r\n    document.dispatchEvent(new MessageEvent('FreezerFire')); // trigger the screenshot\r\n\r\n\r\n### Picturize only what you need\r\n\r\nBy default, Freezer will screenshot the visible screen (`CaptureZone.VisibleScreen`). You can use `CaptureZone.FullPage`to capture the whole document excluding scroll. \r\n\r\n####Get specific part of your page\r\n\r\nIn most cases, you won't have to crop the image result. Freezer provides several options to capture a specific zone of your page. \r\n\r\n######With jQuery\r\nIf the running page have jQuery, you can use a jQuery selector to isolate a specific container. \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n                .SetCaptureZone(new JQuerySelectedZone(\"#chartcontainer\")); \r\n\r\nThis will cause Freezer to delimit the screenshot to the zone defined by  `$(\"#chartcontainer\")`. \r\n\r\n######With a javascript callback function\r\nHowever, it's possible to define your own way to select the capture zone by using javascript callback function : \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n                .SetCaptureZone(new UserDefinedJavascriptZone(\"readcoordinate\",\r\n                @\"function readcoordinate() {\r\n                      return  {x: 0, y: 25, width: document.body.clientWidth, height: 425}; \r\n                }\"));\r\n\r\n######By providing crop zone coordinates\r\nFinally, you can also set manually the capture zone by simply providing coordinates (x, y, width, height). \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n                .SetCaptureZone(new CroppedZone(4,8,25,156));\r\n            \r\n\r\n### Customize the capturing web browser\r\n\r\nAdd some cookies to the capturing browser\r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n               .AddCookie(new Cookie(\"yourwebsite.com\", \"/\", \"CookieName\", \"1\"));\r\n\r\nCustomize user agent \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n               .SetUserAgent(\"Mozilla/5.0 (Windows NT 5.1; rv:15.0) Gecko/20100101 Firefox/15.0.1\");\r\n\r\nChange browser's accept language. \r\n\r\n    var screenshotJob = ScreenshotJobBuilder.Create(\"https://yourwebsite.com\")\r\n               .SetAcceptLanguages(\"fr,en;q=0.5\");\r\n\r\n### Integrate naturally into your ASP.NET MVC application \r\n\r\nFreezer can be easily integrated into an ASP.NET MVC website. Following sample shows how to picturize an action, preserving sessions carried by cookies. \r\n\r\n    [Authorize]\r\n    public class HomeController : Controller\r\n    {\r\n        /// <summary>\r\n        /// Display a HTML/Javascript chart\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public ActionResult DisplayChart()\r\n        {\r\n            return View();\r\n        }\r\n\r\n        /// <summary>\r\n        /// This action will return Home/DisplayChart as picture. Preserving sessions.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public ActionResult DownloadChart()\r\n        {\r\n            var screenShotJob = ScreenshotJobBuilder.Create(\"DisplayChart\", \"Home\")\r\n                .SetTransfertRequestCookies(true); // forward session cookies to the capturing browser\r\n\r\n            return screenShotJob.Freeze();\r\n        }\r\n    }\r\n\r\n### Performance\r\nFreezer use a real Gecko engine to perform screenshot. Thus, warming up the web browser may slow down the first use of Freezer. \r\n\r\nYou can improve overall performance by : \r\n\r\n - setting explicit `minimumWorkerCount` and `maximumWorkerCount` in the config section of your application (cf Configuration file part). \r\n - calling `FreezerGlobal.Initialize()` to init Freezer.\r\n\r\n\r\n\r\n### Configuration file\r\n\r\nYou can set the defaults settings value of Freezer by adding the following sections to your application's configuration file. \r\n\r\n      <configSections>\r\n        <sectionGroup name=\"freezerGlobal\">\r\n          <section name=\"freezerConfiguration\" type=\"Freezer.Configurations.FreezerConfigurationHandler, Freezer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" allowLocation=\"true\" allowDefinition=\"Everywhere\"/>\r\n        </sectionGroup>\r\n      </configSections>\r\n      <freezerGlobal>\r\n        <freezerConfiguration \r\n          minimumWorkerCount=\"2\" \r\n          maximumWorkerCount=\"4\"\r\n          defaultAcceptLanguageHeader=\"en\"\r\n          defaultBrowserWidth=\"1366\"\r\n          defaultBrowserHeight=\"768\"\r\n          defaultCaptureTimeoutSeconds=\"60\"\r\n          >\r\n        </freezerConfiguration>\r\n      </freezerGlobal>\r\n\r\nAll the parameters starting with *default* are optionals and can be override at usage. \r\n\r\n**minimumWorkerCount**: Number of Gecko host processes per appdomain to be warm-up when `FreezerGlobal.Initialize()` is called or at the first use of the engine. \r\n\r\n**maximumWorkerCount**: Total number of Gecko host processes  per appdomain.\r\n\r\n----------\r\n\r\n\r\n> **Notes:**\r\n\r\n> - Freezer needs .NET 4.5+ .\r\n> - Freezer can be bound in both x86 and x64 applications. Anyway *gecko host processes* are run in 32bits.\r\n> - Freezer use the awesome [GeckoFX project](https://bitbucket.org/geckofx/) under MPL license. \r\n> - Freezer is not compatible yet with the mono plateform . You can contribute at github/link to make this happen.\r\n>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}